객체배열
		 *  객체배열은 레퍼런스변수(참조형 변수, 실제 값이 아닌 주소 값을 가르킨다)에 대한 배열이다.
		 *  생성한 인스턴스도 배열을 이용해서 관리하면
		 *  동일한 타입의 여러 개 인스턴스를 각각 취급하지 않고 연속 처리할 수 있어서 유용하다.
		 *  또한 반환값은 1개의 값만 반환할 수 있기 때문에
		 *  동일한 타입의 여러 인스턴스를 반환해야 하는 경우 객체배열을 이용할 수 있다.

static 초기화 블록을 사용하는 이유?

상속(inheritance)은 현실 세계의 상속과 비슷한 개념이다.
		 *  부모가 가지고 있는 재산(자바에서는 클래스가 가지는 멤버)을 자식이 물려받는 의미이다.
		 *  클래스 또한 부모클래스와 자식클래스로 역할을 나누어서 부모가 가지는 멤버를 자식이 물려받아
		 *  자기의 멤버인 것 처럼 사용할 수 있도록 만든 기술이다.
		 * 
		 * 필기.
		 *  하지만 단순 물려받는 개념보다 조금 더 나아간다면
		 *  자바에서의 상속은 부모클래스의 확장(extend)의 개념을 가진다.
		 *  물려받아서 자신의 것 처럼 사용하는 것 뿐 아니라 추가적인 멤버도 작성이 가능하다.
		 *  특히 메소드 재정의(overriding)라는 기술을 이용해서 부모가 가진 메소드를 재정의 하는 것도 가능하다.
		 *
		 * 필기.
		 *  메소드 재정의(overriding)이란 부모가 가지는 메소드 선언부를 그대로 사용하면서
		 *  자식클래스가 정의한 메소드대로 동작하도록 구현 몸체 부분을 새롭게 다시 작성하는 기술이다.
		 *  메소드 재정의를 하면 메소드를 호출할 시 재정의한 메소드가 우선적으로 동작하게 된다.
		 * 
		 * 필기.
		 *  이러한 상속이라는 기술을 사용하게 되면 얻게되는 이점은 크게 두 가지로 볼 수 있다.
		 *  1. 새로운 클래스를 작성할 시 기존에 작성한 클래스를 재사용할 수 있다.
		 *   1-1. 재사용 시 생산성을 크게 향상시킬 수 있다. (새롭게 작성하는거보다 빠르다)
		 *   1-2. 공통적으로 사용하는 코드가 부모클래스에 존재하면 수정사항이 생길 시 부모 클래스만 수정해도
		 *        전체적으로 적용된다. (유지보수성 증가)
		 *  2. 클래스간의 계층 관계가 형성되며 다형성의 문법적인 토대가 된다.
		 * 
		 * 필기.
		 *  하지만 상속으로 인한 단점도 존재한다.
		 *  1. 부모클래스의 기능을 추가/변경할 시 자식클래스가 정상적으로 동작하는지에 대한 예측이 힘들다.
		 *     상속 구조가 복잡해 질 수록 그 영향에 대한 예측이 힘들며 이런 단점이 유지보수성 증가한다는 장점과는
		 *     반대로 유지보수에 악영향을 미친다.
		 *  2. 또한 부모클래스의 변경 또한 쉽지 않다. 자식클래스에서 중요하게 사용하는 기능인 경우
		 *     부모클래스를 변경할 시 자식 클래스에 모두 영향을 줄 수 있다.
		 *     역시 유지보수에 악영향을 미친다.
		 *  3. 부모클래스에서는 의미있었던 기능이 자식클래스에서는 무의미할 수 있다. (불필요한 기능이 추가됨)
		 * 
		 * 필기.
		 *  장점과 단점을 고려했을 때,
		 *  상속은 재사용이라는 장점만 바라보게 되면 오용의 가능성이 있기 때문에 유지보수에 좋지 않는 코드를 작성할 확률이 높다.
		 *  상속은 IS-A 관계로 구분되는 경우에만 사용해야 한다.
		 * 
		 * 필기.
		 *  객체지향 설계 관점에서 바라보는 상속
		 *  모든 객체는 자신이 수신한 메세지에 대해 응답을 해야 하는 책임을 가지며, 그 책임의 규모는 적절해야 한다.
		 *  적절한 책임을 가진 객체들이 서로 협력(메세지 수신과 응담)을 통해 프로그램이 동작하는 것이
		 *  객체지향 프로그햄이다.
		 * 
		 * 필기.
		 *  적절한 책임을 수행하는 객체 또한 그 객체만 수행할 수 있는 기능이라기 보다 역할의 관점으로 바라봐야 한다.
		 *  역할이란 동일한 동작을 수행하는 것을 정의한 것이며, 대체 가능성을 의미한다.
		 *  부모클래스를 추상화 하는 경우에는 역할의 관점으로 바라봐야 한다.
		 *  그래야 자식클래스로 생성한 객체들이 서로 역할을 수행해가며 유연한 코드를 작성할 수 있게 된다.
		 *  동일한 역할을 가지는 모든 객체는 동일한 메세지를 수신하기는 하지만,
		 *  객체별로 그 메세지에 응답하는 방식은 서로 다를 수 있다. (다형성)


super : 자식클래스를 이용해서 객체를 생성할 때 부모 생성자를 호출하여 부모 클래스의 인스턴스도
		 *          함께 생성하게 된다. 이 때 생성한 부모의 인스턴스 주소를 보관하는 레퍼런스 변수로
		 *          자식 클래스 내의 모든 생성자와 메소드 내에서 선언하지 않고도 사용할 수 있는 레퍼런스 변수이다.
		 *  super() : 부모 생성자를 호출하는 구문으로 인자와 매개변수의 타입, 갯수, 순서가 일치하는
		 *            부모의 생성자를 호출하게 된다. this()가 해당 클래스 내의 다른 생성자를 호출하는
		 *            구문이라면, super()는 부모클래스가 가지는 private 생성자를 제외한 나머지 생성자를
		 *            호출할 수 있도록 한 구문이다.







다형성
		 *  다형성이란 하나의 인스턴스가 여러 가지 타입을 가질 수 있는 것을 의미한다.
		 *  그렇기 때문에 하나의 타입으로 여러 타입의 인스턴스를 처리할 수 있기도 하고,
		 *  하나의 메소드 호출로 객체별로 각기 다른 방법으로 동작하게 할 수도 있다.

		 *  다형성은 객체지향 프로그래밍의 3대 특징 (캡슐화, 상속, 다형성) 중 하나이며,
		 *  객체지향 프로그래밍의 꽃이라고 불리울 정도로 활용성이 높고 장점이 많다.
		 *  하지만 학습하기 어렵다는 단점을 가지고 있다.
다형성의 장점
		 *  1. 여러 타입의 객체를 하나의 타입으로 관리할 수 있기 때문에 유지보수성과 생산성이 증가된다.
		 *  2. 상속을 기반으로 한 기술이기 때문에 상속관계에 있는 모든 객체는 동일한 메세지를 수신할 수 있다.
		 *     이런 동일한 메세지를 수신받아 처리하는 내용을 객체별로 다르게 할 수 있다는 장점을 가지고 있다.
		 *     (다양한 기능을 사용하는데 있어서 관리해야 할 메세지 종류가 줄어들게 된다.)
		 *     하나의 호출로 여러 가지 동작을 수행할 수 있다는 측면에서 오버로딩을 다형성으로 보기도 한다.
		 *     다형성을 이해하기 쉬운 가장 좋은 예 이기도 하다.
		 *     하지만 이 부분은 이견이 많이 존재하기 때문에 다형성을 이해하는데 참고로만 활용하자.
		 *  3. 확장성이 좋은 코드를 작성할 수 있다.
		 *  4. 결합도를 낮춰서 유지보수성을 증가시킬 수 있다.

Animal a1 = new Rabbit();
Animal a2 = new Tiger();
//Rabbit r = new Animal();		//에러남
//Tiger t = new Animal();		//에러남  자식타입으로 부모 인스턴스 주소값 저장 불가능
//부모가 가진 cry() method를 overriding 한 경우
a1.cry(); overriding 된 자식의 method를 호출할수 있다. 이 경우를 동적바인딩이라고 한다.
//부모에게 없는 jump() method를 실행한경우
a1.jump(); 에러남 이 경우 jump method를 사용하기 위해선 클래스 타입 형변환 해줘여한다 ex) ((Rabbit) a1).jump();


instanceof : 레퍼런스변수가 참조하는 실제 인스턴스가 원하는 타입과 맞는지 비교하는 연산자
ex)	System.out.println("a1이 Tiger 타입인지 확인 : " + (a1 instanceof Tiger)); false
	System.out.println("a1이 Rabbit 타입인지 확인 : " + (a1 instanceof Rabbit)); true




추상클래스와 추상메소드
		 *  추상메소드를 0개 이상 포함하는 클래스를 추상클래스라고 한다.
		 *  추상클래스는 클래스 선언부에 abstract 키워드를 명시해야 한다.
		 *  추상클래스로는 인스턴스를 생성할 수 없다.
		 *  추상클래스를 사용하려면 추상클래스를 상속받은 하위 클래스를 이용해서 인스턴스를 생성해야 한다.
		 *  이 때 추상클래스는 상위 타입으로 사용될 수 있으며, 다형성을 이용할 수 있다.
		 *
		 * 필기.
		 *  추상클래스에 작성한 추상메소드는 반드시 후손이 오버라이딩 해서 작성해야 하며,
		 *  후손 클래스들의 메소드들의 공통 인터페이스로의 역할을 수행할 수 있다.
		 *  추상클래스에 작성한 메소드를 호출하게 되면 실제 후손 타입의 인스턴스가 가지는 메소드는
		 *  다형성이 적용되어 동적바인딩에 의해 다양한 응답을 할 수 있게 된다.
		 * 
		 * 필기.
		 *  추상 클래스를 상속받아 구현할 때는 extends 키워드를 사용하며
		 *  자바에서는 extends로 클래스를 상속받을 시 하나의 부모 클래스만 가질 수 있다. (단일상속)
		 *
		 * 필기.
		 *  추상메소드란?
		 *  메소드의 선언부만 있고 구현부가 없는 메소드를 추상 메소드라고 한다.
		 *  추상메소드의 경우 반드시 abstract 키워드를 메소드 헤드에 작성해야 한다.
		 *  예) public abstract void method();

인터페이스(interface)
		 *  여기서 다루게 되는 인터페이스는 자바의 클래스와 유사한 형태이지만
		 *  추상메소드와 상수 필드만 가질 수 있는 클래스의 변형체를 말한다.
		 * */
		
		/* 필기.
		 *  인터페이스의 사용 목적
		 *  1. 추상클래스와 비슷하게 필요한 기능을 공통화 해서 강제성을 부여할 목적으로 사용한다. (표준화)
		 *  2. 자바의 단일상속의 단점을 극복할 수 있다. (다중 상속)
		 *
		 * 설명.
		 *  참고로 인터페이스는 정말 많은 의미로 사용된다.
		 *  지금 학습하는 인터페이스 말고도 클래스에 작성한 public method 또한
		 *  객체들이 상호작용을 하기 위한 통로의 의미로 인터페이스라고 불린다.